#stack is one ended data structure in which deletion and insertion will be done at one end
 #Basic operations of Stack
class Stack:
    arr=[]
    size=5
    def Stack_push(self,element):
        self.arr.append(element)
    def Stack_pop(self):
        self.arr.pop
    def Stack_peek(self):
        return self.arr[-1]
    def Stack_isEmpty(self):
        if len(self.arr)==0:
            return True
        else:
            return False
s=Stack()
s.Stack_push(10)
print(s.arr)
s.Stack_pop()
s.Stack_pop()
print(s.arr)
print(s.Stack_peek())


#underflow,overflow
class Stack:
    arr=[]
    size=4
    def Stack_push(self,element):
        if len(self.arr)==self.size:
            print("full")
        else:
            self.arr.append(element)
    def Stack_pop(self):
        if len(self.arr) ==0:
            print("underflow")
        else:
            self.arr.pop()
    def Stack_peek(self):
        if len(self.arr) == 0:
            return "empty Stack"
            return self.arr[-1]
s=Stack()
s.Stack_push(10)
s.Stack_push(20)
s.Stack_push(30)
s.Stack_push(40)
print(s.arr)


#reverse
#reverse the stack

class Stack:
    arr=[]
    size=4
    def Stack_push(self,element):
        self.arr.append(element)
    def Stack_pop(self):
        self.arr.pop()
    def printStack(self):
        print(self.arr)
s1=Stack()
s2=Stack()
s1.Stack_push(10)
s1.Stack_push(20)
s1.Stack_push(30)
s1.Stack_push(40)
s1.printStack()
s2.Stack_push(s1.Stack_pop())
s2.Stack_push(s1.Stack_pop())
s2.Stack_push(s1.Stack_pop())
s2.Stack_push(s1.Stack_pop())
s2.printStack()
